{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<ul> <li> DWS4 DWS4</li> <li> Notes for simple reference</li> <li> TemplateStuff</li> <li> Usefull Config settings ... </li> </ul>"},{"location":"Docmosis/Cloud/DWS4/","title":"DWS4","text":""},{"location":"Docmosis/Cloud/DWS4/#variable-scope","title":"Variable Scope","text":"<p>In general it pays to create/initialize variables in the root context of templates (before going into any repeating sections), this ensures that the variable will be available throughout the entire template (essentially a global variable). When creating a variable inside of a repeating section, it will only exist within that context (within that repeating section block) and when the repeating section ends, or you jump into another repeating section, or use $top/$parent it won't be available in the new context.</p> <p><pre><code># Declare the variable here so it exists in the global scope\n&lt;&lt;$asdf=\u2019\u2019&gt;&gt;\n\n&lt;&lt;rs_locations&gt;&gt;\n    &lt;&lt;name&gt;&gt;&lt;&lt;id&gt;&gt;&lt;&lt;$idx&gt;&gt;&lt;&lt;$itemidx&gt;&gt;\n&lt;&lt;es_locations&gt;&gt;\n\n\n&lt;&lt;rs_buildings&gt;&gt;\n&lt;&lt;value&gt;&gt;\n\n&lt;&lt;$asdf=locid&gt;&gt;\n&lt;&lt;$asdf&gt;&gt;\n# $asdf can be used even though we are in a different scope\n&lt;&lt;$top.locations[$asdf].name&gt;&gt;\n\n&lt;&lt;es_&gt;&gt;\n\n&lt;&lt;rs_buildings&gt;&gt;\n&lt;&lt;value&gt;&gt;\n\n&lt;&lt;$top.locations.[buildings.locid].name&gt;&gt;\n\n&lt;&lt;es_&gt;&gt;\n</code></pre> See the template guide for more...</p>"},{"location":"Docmosis/Cloud/DWS4/#top-or-root","title":"&lt;&lt;$top&gt;&gt; or &lt;&lt;$root&gt;&gt;","text":"<p>The root of the data regardless of the current position or context in the template. Use the dump command in a template to see the data available to the template :</p> <p><code>&lt;&lt;dump:$top&gt;&gt;</code></p>"},{"location":"Docmosis/Cloud/DWS4/#this-or-current","title":"&lt;&lt;$this&gt;&gt; or &lt;&lt;$current&gt;&gt;","text":"<p>The current source of data in the current position in the template. This allows for anonymous data lookups from arrays or collections such as &lt;&lt;$current[0]&gt;&gt;.</p>"},{"location":"Docmosis/Cloud/DWS4/#parent","title":"&lt;&lt;$parent&gt;&gt;","text":"<p>The parent or container of data in the current context of the template. Allows data lookup in the current \u201chotel\u201d when the current context is a \u201cfloor\u201d for example.</p>"},{"location":"Docmosis/Cloud/DWS4/#charts","title":"Charts","text":"<p>Injecting data into Microsoft Charts is not yet supported. (Dec2024)</p> <p>Our suggested workaround currently is to generate the chart as an image and then use Docmosis to replace the image.</p> <p>There are different services that can be used to generate graphs. For example, quickchart.io. Using this service, you can provide a URL in your data, which will generate a chart as an image.</p> <p>See quickchart example:</p> <p>If you click that link you will see the image. The challenge for you will be constructing that link before sending it to Docmosis.</p> <p>Please Note: When sending to Docmosis Cloud, you will need us to whitelist the base URL (https://quickchart.io/). </p> <p>There are other services for generating charts, quickchart is just a popular one used by many of our customers.</p> <p>Use a simple template with PlaceHolder image - bookmark name -imgfit_putChartHere and data below</p> <pre><code>{\"putChartHere\": \"[imageURL:https://quickchart.io/chart?c=%7B%0A%20%20%22type%22%3A%20%22radar%22%2C%0A%20%20%22data%22%3A%20%7B%0A%20%20%20%20%22labels%22%3A%20%5B%0A%20%20%20%20%20%20%22January%22%2C%0A%20%20%20%20%20%20%22February%22%2C%0A%20%20%20%20%20%20%22March%22%2C%0A%20%20%20%20%20%20%22April%22%2C%0A%20%20%20%20%20%20%22May%22%2C%0A%20%20%20%20%20%20%22June%22%2C%0A%20%20%20%20%20%20%22July%22%2C%0A%20%20%20%20%20%20%22August%22%0A%20%20%20%20%5D%2C%0A%20%20%20%20%22datasets%22%3A%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22backgroundColor%22%3A%20%22rgba(255%2C%2099%2C%20132%2C%200.5)%22%2C%0A%20%20%20%20%20%20%20%20%22borderColor%22%3A%20%22rgb(255%2C%2099%2C%20132)%22%2C%0A%20%20%20%20%20%20%20%20%22data%22%3A%20%5B%0A%20%20%20%20%20%20%20%20%20%2015.09%2C%0A%20%20%20%20%20%20%20%20%20%2015.67%2C%0A%20%20%20%20%20%20%20%20%20%2012.5%2C%0A%20%20%20%20%20%20%20%20%20%2012.77%2C%0A%20%20%20%20%20%20%20%20%20%2013.62%2C%0A%20%20%20%20%20%20%20%20%20%2013.68%2C%0A%20%20%20%20%20%20%20%20%20%2013.93%2C%0A%20%20%20%20%20%20%20%20%20%2015.95%0A%20%20%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20%20%20%22label%22%3A%20%22D0%22%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22backgroundColor%22%3A%20%22rgba(255%2C%20159%2C%2064%2C%200.5)%22%2C%0A%20%20%20%20%20%20%20%20%22borderColor%22%3A%20%22rgb(255%2C%20159%2C%2064)%22%2C%0A%20%20%20%20%20%20%20%20%22data%22%3A%20%5B%0A%20%20%20%20%20%20%20%20%20%2024.55%2C%0A%20%20%20%20%20%20%20%20%20%2028.91%2C%0A%20%20%20%20%20%20%20%20%20%2021.81%2C%0A%20%20%20%20%20%20%20%20%20%2023.27%2C%0A%20%20%20%20%20%20%20%20%20%2026.98%2C%0A%20%20%20%20%20%20%20%20%20%2026.05%2C%0A%20%20%20%20%20%20%20%20%20%2025.39%2C%0A%20%20%20%20%20%20%20%20%20%2024.92%0A%20%20%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20%20%20%22label%22%3A%20%22D1%22%2C%0A%20%20%20%20%20%20%20%20%22fill%22%3A%20%22-1%22%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22backgroundColor%22%3A%20%22rgba(255%2C%20205%2C%2086%2C%200.5)%22%2C%0A%20%20%20%20%20%20%20%20%22borderColor%22%3A%20%22rgb(255%2C%20205%2C%2086)%22%2C%0A%20%20%20%20%20%20%20%20%22data%22%3A%20%5B%0A%20%20%20%20%20%20%20%20%20%2036.35%2C%0A%20%20%20%20%20%20%20%20%20%2043.93%2C%0A%20%20%20%20%20%20%20%20%20%2032.54%2C%0A%20%20%20%20%20%20%20%20%20%2033.54%2C%0A%20%20%20%20%20%20%20%20%20%2042.82%2C%0A%20%20%20%20%20%20%20%20%20%2039.34%2C%0A%20%20%20%20%20%20%20%20%20%2035.84%2C%0A%20%20%20%20%20%20%20%20%20%2033.5%0A%20%20%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20%20%20%22label%22%3A%20%22D2%22%2C%0A%20%20%20%20%20%20%20%20%22fill%22%3A%201%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22backgroundColor%22%3A%20%22rgba(75%2C%20192%2C%20192%2C%200.5)%22%2C%0A%20%20%20%20%20%20%20%20%22borderColor%22%3A%20%22rgb(75%2C%20192%2C%20192)%22%2C%0A%20%20%20%20%20%20%20%20%22data%22%3A%20%5B%0A%20%20%20%20%20%20%20%20%20%2047.7%2C%0A%20%20%20%20%20%20%20%20%20%2058.92%2C%0A%20%20%20%20%20%20%20%20%20%2044.45%2C%0A%20%20%20%20%20%20%20%20%20%2049.08%2C%0A%20%20%20%20%20%20%20%20%20%2053.39%2C%0A%20%20%20%20%20%20%20%20%20%2051.85%2C%0A%20%20%20%20%20%20%20%20%20%2048.4%2C%0A%20%20%20%20%20%20%20%20%20%2049.36%0A%20%20%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20%20%20%22label%22%3A%20%22D3%22%2C%0A%20%20%20%20%20%20%20%20%22fill%22%3A%20false%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22backgroundColor%22%3A%20%22rgba(54%2C%20162%2C%20235%2C%200.5)%22%2C%0A%20%20%20%20%20%20%20%20%22borderColor%22%3A%20%22rgb(54%2C%20162%2C%20235)%22%2C%0A%20%20%20%20%20%20%20%20%22data%22%3A%20%5B%0A%20%20%20%20%20%20%20%20%20%2060.73%2C%0A%20%20%20%20%20%20%20%20%20%2071.97%2C%0A%20%20%20%20%20%20%20%20%20%2053.96%2C%0A%20%20%20%20%20%20%20%20%20%2057.22%2C%0A%20%20%20%20%20%20%20%20%20%2065.09%2C%0A%20%20%20%20%20%20%20%20%20%2062.06%2C%0A%20%20%20%20%20%20%20%20%20%2056.91%2C%0A%20%20%20%20%20%20%20%20%20%2060.52%0A%20%20%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20%20%20%22label%22%3A%20%22D4%22%2C%0A%20%20%20%20%20%20%20%20%22fill%22%3A%20%22-1%22%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22backgroundColor%22%3A%20%22rgba(153%2C%20102%2C%20255%2C%200.5)%22%2C%0A%20%20%20%20%20%20%20%20%22borderColor%22%3A%20%22rgb(153%2C%20102%2C%20255)%22%2C%0A%20%20%20%20%20%20%20%20%22data%22%3A%20%5B%0A%20%20%20%20%20%20%20%20%20%2073.33%2C%0A%20%20%20%20%20%20%20%20%20%2080.78%2C%0A%20%20%20%20%20%20%20%20%20%2068.05%2C%0A%20%20%20%20%20%20%20%20%20%2068.59%2C%0A%20%20%20%20%20%20%20%20%20%2076.79%2C%0A%20%20%20%20%20%20%20%20%20%2077.24%2C%0A%20%20%20%20%20%20%20%20%20%2066.08%2C%0A%20%20%20%20%20%20%20%20%20%2072.37%0A%20%20%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20%20%20%22label%22%3A%20%22D5%22%2C%0A%20%20%20%20%20%20%20%20%22fill%22%3A%20%22-1%22%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%5D%0A%20%20%7D%2C%0A%20%20%22options%22%3A%20%7B%0A%20%20%20%20%22maintainAspectRatio%22%3A%20true%2C%0A%20%20%20%20%22spanGaps%22%3A%20false%2C%0A%20%20%20%20%22elements%22%3A%20%7B%0A%20%20%20%20%20%20%22line%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%22tension%22%3A%200.000001%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%2C%0A%20%20%20%20%22plugins%22%3A%20%7B%0A%20%20%20%20%20%20%22filler%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%22propagate%22%3A%20false%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%22samples-filler-analyser%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%22target%22%3A%20%22chart-analyser%22%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D]\"}\n</code></pre>"},{"location":"Docmosis/Cloud/DWS4/#languagelocale-formatting-examples","title":"Language/Locale Formatting Examples","text":"Language Name Code ISO Code Number Output Date Output English <code>&lt;&lt;{numFormat(myVal,'#,###.##')}&gt;&gt;</code> <code>&lt;&lt;{dateFormat(myDate , 'EEEE, dd MMMM yyyy' , 'ddMMyyyy')}&gt;&gt;</code> French FR FRA <code>&lt;&lt;{numFormat(myVal,'# ###,##','fr','false')}&gt;&gt;</code> <code>&lt;&lt;{dateFormat(myDate , 'EEEE, dd MMMM yyyy' , 'ddMMyyyy', 'FR')}&gt;&gt;</code> Danish DA DAN <code>&lt;&lt;{numFormat(myVal,'#.###,##','da','false')}&gt;&gt;</code> <code>&lt;&lt;{dateFormat(myDate , 'EEEE, dd MMMM yyyy' , 'ddMMyyyy', 'DA')}&gt;&gt;</code> Portuguese PT POR <code>&lt;&lt;{numFormat(myVal,'#.###,##','pt','false')}&gt;&gt;</code> <code>&lt;&lt;{dateFormat(myDate , 'EEEE, dd MMMM yyyy' , 'ddMMyyyy', 'PT')}&gt;&gt;</code> Spanish ES SPA <code>&lt;&lt;{numFormat(myVal,'#.###,##','es','false')}&gt;&gt;</code> <code>&lt;&lt;{dateFormat(myDate , 'EEEE, dd MMMM yyyy' , 'ddMMyyyy', 'ES')}&gt;&gt;</code> Dutch NL NLD <code>&lt;&lt;{numFormat(myVal,'#.###,##','nl','false')}&gt;&gt;</code> <code>&lt;&lt;{dateFormat(myDate , 'EEEE, dd MMMM yyyy' , 'ddMMyyyy', 'NL')}&gt;&gt;</code> German DE DEU <code>&lt;&lt;{numFormat(myVal,'#.###,##','de','false')}&gt;&gt;</code> <code>&lt;&lt;{dateFormat(myDate , 'EEEE, dd MMMM yyyy' , 'ddMMyyyy', 'DE')}&gt;&gt;</code>"},{"location":"Docmosis/Cloud/DWS4/#input-data-json","title":"Input Data (JSON)","text":"<pre><code>{\n  \"myVal\": \"1,234,567.89\",\n  \"myDate\": \"27012024\"\n}\n</code></pre>"},{"location":"Docmosis/Cloud/DWS4/#more-dates","title":"More Dates","text":"<pre><code>{\n\"myDate\": \"2024-09-16T18:11:00\"\n}\n\n###Examples\n\nIf the Input Format is ISO 8601 (yyyy-MM-dd'T'HH:mm:ss)\nFor input like 2024-09-16T18:11:00Z:\n&lt;&lt;{dateFormat(myDate, 'M/d/yy, h:mm a', \u2018yyyy-MM-dd'T'HH:mm:ss\u2019)}&gt;&gt; \nIf the Input Format is yyyy-MM-dd\nFor input like 2024-09-16:\n\n&lt;&lt;{dateFormat('2024-09-16', 'M/d/yy', 'yyyy-MM-dd')}&gt;&gt; \nTo include the time, you\u2019d need a combined input format, such as 2024-09-16 18:11 (assuming yyyy-MM-dd HH:mm):\n\n&lt;&lt;{dateFormat('2024-09-16 18:11', 'M/d/yy, h:mm a', 'yyyy-MM-dd HH:mm')}&gt;&gt; \nIf the Input Format is Milliseconds Since Epoch (&lt;&lt;$nowMS&gt;&gt;)\nTo convert milliseconds since epoch to the desired format:\n\n&lt;&lt;{dateFormat($nowUTC, 'M/d/yy, h:mm a')}&gt;&gt; \nIf the Input is UTC (&lt;&lt;$nowUTC&gt;&gt;)\nFor current UTC date and time:\n\n&lt;&lt;{dateFormat($nowUTC, 'M/d/yy, h:mm a', \u2018yyyy-MM-dd'T'HH:mm:ssX\u2019)}&gt;&gt; \nBreaking Down the Output Format\nM \u2192 Month without leading zero (e.g., 9 for September)\nd \u2192 Day without leading zero (e.g., 16)\nyy \u2192 Two-digit year (e.g., 24 for 2024)\nh \u2192 Hour in 12-hour format (e.g., 6)\nmm \u2192 Minutes with leading zeros if necessary (e.g., 11)\na \u2192 AM/PM marker (e.g., PM)\n</code></pre>"},{"location":"Docmosis/Cloud/DWS4/#barcodes","title":"Barcodes","text":"<p><code>&lt;&lt;barcode:barcode1:ABC123:code128&gt;&gt;</code></p> <p>specifies barcode1 to have a value of ABC123 and be of type code128.</p> <p>So ABC123 =default data to display if name (barcode1) returns null value Assuming that you wish to supply a value in your data that is used throughout the document - for every barcode in the document. <pre><code>{\n \"data\" : \"12345678\"\n }\n ```\n\nA suggested solution is to create your image bookmarks using variables (note: due to\nrestrictions in MS Word\nwe are unable to use the $ symbol in bookmarks, so we use _VAR in the name)\n\nFor example name our barcode bookmarks : img_var_barcode1, img_var_barcode2 etc\n\nIn our template we create variables which we populate with data  :\n```js\n&lt;&lt;$barcode1=data&gt;&gt;\n&lt;&lt;$barcode2=data&gt;&gt; ... etc\n</code></pre></p> <p>We then call the barcode function with this data and fontsize, format etc</p> <p><code>&lt;&lt;barcode:$barcode1:code39:fontSize=2:ec=false&gt;&gt;</code></p> <p>we do this for every barcode bookmark.</p>"},{"location":"Docmosis/Cloud/DWS4/#conditionals","title":"Conditionals","text":"<p>Filter data and show in table with headers if matched data found, don't print blank lines if nothing matches.</p> <pre><code>{\n\n  \"list\": [\n    {\n      \"typeID\": \"1\",\n      \"description\": \"value2\"\n    },\n    {\n      \"typeID\": \"2\",\n      \"description\": \"value4\"\n    },\n    {\n      \"typeID\": \"12\",\n      \"description\": \"value6\"\n    }\n  ]\n}\n</code></pre> <p>Template <pre><code>&lt;&lt;$showheaders=false&gt;&gt;\n&lt;&lt;rs_list:filter(typeID=\u20181\u2019)&gt;&gt;\n&lt;&lt;$showheaders=true&gt;&gt;\n&lt;&lt;es_&gt;&gt;\n\ntable\n&lt;&lt;cr_$showheaders&gt;&gt; \nTYPE    DESCRIPTION\n&lt;&lt;er_&gt;&gt; \n&lt;&lt;rr_list:filter(typeID=\u20181\u2019)&gt;&gt;  \n&lt;&lt;typeID&gt;&gt;  &lt;&lt;description&gt;&gt;\n&lt;&lt;er_&gt;&gt; \n\nend table\n</code></pre></p>"},{"location":"Docmosis/Cloud/DWS4/#merge-fields","title":"Merge Fields","text":"<p>The key combination of  <code>ALT + F9</code>  will toggle the hidden fields for you.</p> <p>Also <code>CTRL + A (select all)</code> followed by <code>F9</code> will update the display text for all merge fields and this will make the problem fields more obvious.</p>"},{"location":"Docmosis/Cloud/DWS4/#dateformat-and-dateadd","title":"dateFormat and dateAdd","text":"<pre><code>&lt;&lt;$formattedDate = {dateFormat(decisionDateTime, ' d-MMM-yyyy', \u2018yyyy-MM-dd'T'HH:mm:ss\u2019)}&gt;&gt;\n&lt;&lt;$formattedDate&gt;&gt;\n\nWith 60 days added: &lt;&lt;{dateAdd($formattedDate, 60, \u2018day\u2019)}&gt;&gt; \n\nOneStep:\n&lt;&lt;$date01 = {dateAdd(decisionDateTime,60,\u2019day\u2019, 'd-MMM-yyyy' ,\u2018yyyy-MM-dd'T'HH:mm:ss\u2019)}&gt;&gt;\n&lt;&lt;$date01&gt;&gt;\n\nData :\n{\n  \"decisionDateTime\": \"2021-05-25T14:47:03\"\n}\n\nIn Template\n\n&lt;&lt;$datePlus60 = {dateAdd(decisionDateTime,60,\u2019day\u2019, 'd-MMM-yyyy' ,\u2018yyyy-MM-dd'T'HH:mm:ss\u2019)}&gt;&gt;\n\nAfter adding 60 Days &lt;&lt;$datePlus60&gt;&gt;\n</code></pre>"},{"location":"Docmosis/Cloud/DWS4/#checkboxes","title":"Checkboxes","text":"<p>https://resources.docmosis.com/example-templates/generate-disclosure-form-from-template</p> <p>Use windings - word-insert-symbols ---</p> <pre><code>Happy   &lt;&lt;cs_isHappy&gt;&gt;\uf054&lt;&lt;else&gt;&gt;\uf0a3&lt;&lt;es_&gt;&gt; Yes &lt;&lt;cs_isHappy&gt;&gt;\uf0a3&lt;&lt;else&gt;&gt;\uf054&lt;&lt;es_&gt;&gt; No\nOn leave    &lt;&lt;cs_isOnLeave&gt;&gt;\uf054&lt;&lt;else&gt;&gt;\uf0a3&lt;&lt;es_&gt;&gt; Yes   &lt;&lt;cs_isOnLeave&gt;&gt;\uf0a3&lt;&lt;else&gt;&gt;\uf054&lt;&lt;es_&gt;&gt; No\nOrdered &lt;&lt;cs_isOrdered&gt;&gt;\uf054&lt;&lt;else&gt;&gt;\uf0a3&lt;&lt;es_&gt;&gt; Yes   &lt;&lt;cs_isOrdered&gt;&gt;\uf0a3&lt;&lt;else&gt;&gt;\uf054&lt;&lt;es_&gt;&gt; No\nBackordered &lt;&lt;cs_isBackordered&gt;&gt;\uf054&lt;&lt;else&gt;&gt;\uf0a3&lt;&lt;es_&gt;&gt; Yes   &lt;&lt;cs_isBackordered&gt;&gt;\uf0a3&lt;&lt;else&gt;&gt;\uf054&lt;&lt;es_&gt;&gt; No\n\n{\n  \"isHappy\": \"true\",\n  \"isOnLeave\": \"true\",\n  \"isOrdered\": \"false\",\n  \"isBackordered\": \"true\"\n}\n</code></pre>"},{"location":"Docmosis/Cloud/DWS4/#alternating-table-row-colors","title":"Alternating Table Row Colors","text":"<p>Docmosis has a feature for easily implementing alternating table row colors. If a cell of a row inside a set of repeating rows has a background color different to that of the corresponding cell of the starting row, then the background color for that cell will alternate between that of the starter row and its own background color.</p> <p>This can be disabled with the &lt;&gt; field. If the field is placed anywhere in a table, the alternating color is disabled for the specific table. If the field is placed anywhere in the body text of the template, outside of any table, the all the following tables will have no alternating row colors. <p>Uniformly coloring the whole table in the template would also prevent the row alternating.</p> <pre><code>With rr loop\n\n&lt;&lt;noTableRowAlternate&gt;&gt;\n&lt;&lt;rr_entries&gt;&gt;\n&lt;&lt;cr_{ price != \u2019\u2019 &amp;&amp; discount != \u2019\u2019 }&gt;&gt;\n            &lt;&lt;price&gt;&gt;\n&lt;&lt;discount&gt;&gt;\n&lt;&lt;er_{ price != \u2019\u2019 &amp;&amp; discount != \u2019\u2019 }&gt;&gt;\n&lt;&lt;er_entries&gt;&gt;\n\n\nWith rs loop\n\n&lt;&lt;rs_entries&gt;&gt;\n&lt;&lt;cr_{ price != \u2019\u2019 &amp;&amp; discount != \u2019\u2019 }&gt;&gt;\n            &lt;&lt;price&gt;&gt;\n&lt;&lt;discount&gt;&gt;\n&lt;&lt;er_{ price != \u2019\u2019 &amp;&amp; discount != \u2019\u2019 }&gt;&gt;\n&lt;&lt;es_entries&gt;&gt;\n</code></pre>"},{"location":"Docmosis/Cloud/DWS4/#remove-numbers-in-a-barcode","title":"Remove numbers in a barcode","text":"<p>To remove the numbers in a barcode add \"fontSize=0\" to the barcode field, eg:</p> <p><code>&lt;&lt;barcode:barcode8:345457:code128:fontSize=0&gt;&gt;</code></p>"},{"location":"Docmosis/Cloud/DWS4/#sort-multiple-fields","title":"Sort Multiple Fields","text":"<pre><code>I have a table of lineitems and I want to sort multiple fields what is the best way to do that?\n\nFor example \n\nItems: [{\n\"SKU\": \"Test\",\n\"Qty\":1\n\"Metal\": \"copper\",\n\"Grams\": 1\n}]\n\nand I want to sort it as metal (ascending) then grams (descending) then SKU (ascending) \n</code></pre> <p>``` &lt;&gt; &lt;&gt; &lt;&gt; &lt;&gt; <p>Or &lt;&gt; if not operating across table rows.  ``` <p>For more on sorting, please see 3.11.3 Sorting in Repeating Sections from page 73 of the Template Guide,</p>"},{"location":"Docmosis/Libre/Writer/","title":"Libre Writer","text":""},{"location":"Docmosis/Libre/Writer/#font-stuff","title":"Font stuff","text":"<p>C:\\Users\\Colin\\AppData\\Roaming\\LibreOffice\\4\\user\\temp\\embeddedfonts\\fromsystem</p> <p>C:\\Users\\Colin\\AppData\\Roaming\\LibreOffice\\4\\user\\temp\\embeddedfonts\\fromdocs</p>"},{"location":"Docmosis/Libre/Writer/#command-line-install","title":"Command Line install","text":"<pre><code>C:\\Users\\Colin\\Documents\\LibreOffice_versions&gt;\n\nmsiexec /a C:\\Users\\Colin\\Documents\\LibreOffice_versionsLibO_3.6.7.2_Win_x86_install_multi.msi TARGETDIR=\"c:\\Program Files (x86)\\Libre Office3.6.7.2\"\n\n\nmsiexec /a ./LibreOffice_24.8.3.1_Win_x86-64.msi TARGETDIR=\"c:\\Program Files(x86)\\LibreOffice24.8.3.1\n\nmsiexec /a LibreOffice_6.2.8.2_Win_x64.msi \"TARGETDIR=c:\\program files\\LibreOffice6.2.8.2\"\n</code></pre> <p>Take a pop file and convert it to pdf via command line </p> <p><code>C:\\Users\\Colin\\Documents\\Customers\\leo-dmirs&gt;\"\\Program Files\\LibreOffice24.8.3.1.new\\program\\soffice.exe\" --convert-to pdf dm_9053388711178713391pop</code></p> <p>this is asycronous so keep looking for the PDF file to appear in the folder : this will run until complete and not be stopped by docmosis after 30seconds</p>"},{"location":"Docmosis/Postman/basics/","title":"Basics","text":""},{"location":"Docmosis/Postman/basics/#postman-workspaces","title":"Postman Workspaces","text":"<ul> <li>Purpose: Designed to organize and collaborate on API-related work.</li> <li>Scope: A workspace is a container for multiple collections, environments, APIs, and other resources.</li> <li>Collaboration: Allows team members to work together on shared API projects. Workspaces can be personal, team-specific, or public.</li> <li>Use Case: Use workspaces to manage separate projects or teams, such as \"Development\" vs. \"Production\" APIs.</li> </ul>"},{"location":"Docmosis/Postman/basics/#postman-collections","title":"Postman Collections","text":"<ul> <li>Purpose: A structured set of API requests grouped together.</li> <li>Scope: Collections exist within a workspace and are used to define, document, and test APIs.</li> <li>Organization: You can add folders, requests, pre-request scripts, and tests to a collection.</li> <li>Use Case: Use collections to test API endpoints, automate workflows, or share API documentation with others.</li> </ul>"},{"location":"Docmosis/Postman/basics/#key-differences","title":"Key Differences","text":"Aspect Workspaces Collections Purpose Manages projects and teams. Manages specific API requests and workflows. Scope High-level container for collections, environments, etc. A focused set of API requests. Collaboration Shares resources across teams. Shares specific requests or workflows. Typical Contents Collections, APIs, environments, monitors, and mock servers. Requests, folders, tests, and scripts. <p>In short, workspaces organise projects, while collections organise API requests.</p>"},{"location":"Docmosis/Postman/basics/#postman-environments-an-overview","title":"Postman Environments: An Overview","text":"<p>What are Environments? - Environments in Postman are sets of key-value pairs that store variables. - They allow you to reuse variables across requests, collections, and workflows, making it easier to test APIs in different contexts.</p>"},{"location":"Docmosis/Postman/basics/#uses-of-environments","title":"Uses of Environments","text":"<ol> <li>Switching Between Configurations:</li> <li>Quickly switch between development, staging, and production environments by loading different variable sets.</li> <li> <p>Example: </p> <ul> <li>Dev: <code>{{base_url}} = https://api-dev.example.com</code></li> <li>Prod: <code>{{base_url}} = https://api.example.com</code></li> </ul> </li> <li> <p>Parameterization:</p> </li> <li> <p>Replace hardcoded values in requests (e.g., URLs, authentication tokens) with variables like <code>{{base_url}}</code> or <code>{{api_key}}</code>.</p> </li> <li> <p>Sensitive Data Management:</p> </li> <li> <p>Store sensitive values like API keys, tokens, and credentials securely using environment variables.</p> </li> <li> <p>Collaboration:</p> </li> <li> <p>Share environments with team members to maintain consistent configurations across teams.</p> </li> <li> <p>Automated Testing:</p> </li> <li>Run the same set of requests against multiple environments during testing by passing environment variables into test scripts.</li> </ol>"},{"location":"Docmosis/Postman/basics/#how-to-use-environments","title":"How to Use Environments","text":"<ol> <li>Create an Environment:</li> <li> <p>Go to the Environments tab and create a new environment with variables.</p> </li> <li> <p>Define Variables:</p> </li> <li> <p>Add variables like <code>base_url</code>, <code>auth_token</code>, or <code>user_id</code> with their respective values.</p> </li> <li> <p>Use Variables:</p> </li> <li>Reference variables in requests using <code>{{variable_name}}</code>.</li> <li> <p>Example:      <pre><code>GET {{base_url}}/users/{{user_id}}\n</code></pre></p> </li> <li> <p>Switch Environments:</p> </li> <li>Use the dropdown menu in Postman to select the desired environment for your requests.</li> </ol>"},{"location":"Docmosis/Postman/basics/#key-features","title":"Key Features","text":"<ul> <li>Global Variables: Variables that are accessible across all environments.</li> <li>Local Variables: Temporary variables scoped to a single request or script.</li> <li>Environment-Specific Variables: Unique values for each environment, allowing easy context switching.</li> </ul> <p>In summary, Postman environments streamline API testing by enabling dynamic configuration and flexible workflows, making them essential for scalable and efficient API development.</p>"},{"location":"Docmosis/Postman/python/","title":"Python","text":""},{"location":"Docmosis/Postman/python/#python-requests-module","title":"Python requests module","text":""},{"location":"Docmosis/Postman/python/#difference-between-data-and-json","title":"Difference between data and json","text":"<p>json : It automatically sets Content-Type header to \u201capplication/json\u201d and converts provided data into JSON string.</p> <p>data : It allows us to send data in the form of a dictionary, bytes, or file-like object. We should set \u2018Content-Type\u2019 explicitly while using data.</p> <p>So the difference b/w both is how Content-Type is being set.</p> <pre><code>response = requests.post(url=url, json=request_body)\n\nprint(response.status_code, response.json()) \n\n# 201 {'title': 'new_blog', 'body': 'new_blog is new blog', 'userId': 1, 'id': 101}\n</code></pre> <pre><code>response = requests.post(url=url, json=request_body)\n\n# can be replaced with \n\nresponse = requests.post(url, data=request_body) \n</code></pre>"},{"location":"Docmosis/Topics/html/","title":"HTML in Docmosis","text":""},{"location":"Docmosis/Topics/html/#support-in-docmosis-for-html-is-very-limited","title":"Support in Docmosis for HTML is very limited.","text":""},{"location":"Docmosis/Topics/html/#when-data-html-is-injected-into-a-template-via-the-htmlxxx-it-is-styled-using-the-body-text-style-which-is-inturn-based-on-the-normal-style","title":"When data (html) is injected into a template via the <code>&lt;&lt;html:xxx&gt;&gt;</code> it is styled using the Body Text style - which is inturn based on the Normal style.","text":"<p>Should you desire a certain style for html in a document - this is an easy way to achieve this.</p> <p>html tags / content shouldnot be set to full justify (in word).</p> <p>It does not matter what styles or inline formatting are applied to the field, the style named \"Body Text\" will set the formatting of the output.</p> <p>Strip unwanted p tags </p> <pre><code>&lt;&lt;$HelpText={replaceStr(HelpText,'&lt;p&gt;','')}&gt;&gt;\n&lt;&lt;$Stripped={replaceStr($HelpText,'&lt;/p&gt;','')}&gt;&gt;\n&lt;&lt;$myindex={indexOf(\u2018$Stripped\u2019, \u2018&lt;\u2019)=-1}&gt;&gt;\n&lt;&lt;cs_{$myindex=\u2019true\u2019}&gt;&gt;\n&lt;&lt;$Stripped&gt;&gt;\n&lt;&lt;else&gt;&gt;\n&lt;&lt;html:HelpText&gt;&gt;\n&lt;&lt;es_&gt;&gt;\n</code></pre>"},{"location":"Docmosis/Tornado/docker/","title":"Docker","text":"<p>Create a new or amend current docker file on host. To run ...</p> <p><code>docker build --tag customdocmosis/tornado -f mydockerfile.txt .</code></p> <p>Use docker-compose create a Dockerfile and add to directory - then:</p> <p>create a docker-compose.yaml <pre><code>version: '3.3'\n\nservices:\n  tornado:\n    build:\n      context: /home/colin/\n    ports:\n      - \"8080:8080\"\n    volumes:\n      - /home/colin/docmosisTemplates:/home/docmosis/templates\n    environment:\n      DOCMOSIS_KEY: \"XXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n      DOCMOSIS_SITE: \"Free Trial Tornado\"\n      DOCMOSIS_ADMINPW: \"password\"\n</code></pre> then  :</p> <p><code>$sudo docker-compose up --build</code></p>"},{"location":"Docmosis/Tornado/docker/#1-check-docker-version-and-info","title":"1. Check Docker Version and Info","text":"<ul> <li>Version: Check the Docker version installed:   <pre><code>docker --version\n</code></pre></li> <li>Info: Get system-wide information about Docker, including containers, images, and resources:   <pre><code>docker info\n</code></pre></li> </ul>"},{"location":"Docmosis/Tornado/docker/#2-explore-docker-commands","title":"2. Explore Docker Commands","text":"<p>Use the <code>docker help</code> command to see all available commands: <pre><code>docker help\n</code></pre></p> <p>For detailed help about a specific command, use: <pre><code>docker &lt;command&gt; --help\n</code></pre></p>"},{"location":"Docmosis/Tornado/docker/#3-container-management-commands","title":"3. Container Management Commands","text":"<ul> <li>List Containers:</li> <li>Running containers:     <pre><code>docker ps\n</code></pre></li> <li> <p>All containers (including stopped ones):     <pre><code>docker ps -a\n</code></pre></p> </li> <li> <p>Start/Stop/Restart a Container:   <pre><code>docker start &lt;container_id_or_name&gt;\ndocker stop &lt;container_id_or_name&gt;\ndocker restart &lt;container_id_or_name&gt;\n</code></pre></p> </li> <li> <p>Remove a Container:   <pre><code>docker rm &lt;container_id_or_name&gt;\n</code></pre></p> </li> <li> <p>View Logs of a Container:   <pre><code>docker logs &lt;container_id_or_name&gt;\n</code></pre></p> </li> <li> <p>Attach to a Running Container:   <pre><code>docker attach &lt;container_id_or_name&gt;\n</code></pre></p> </li> <li> <p>Run a Command in a Running Container:   <pre><code>docker exec -it &lt;container_id_or_name&gt; &lt;command&gt;\n</code></pre>   Example: Open a bash shell inside the container:   <pre><code>docker exec -it &lt;container_id_or_name&gt; bash\n</code></pre></p> </li> </ul>"},{"location":"Docmosis/Tornado/docker/#4-image-management-commands","title":"4. Image Management Commands","text":"<ul> <li> <p>List Images:   <pre><code>docker images\n</code></pre></p> </li> <li> <p>Remove an Image:   <pre><code>docker rmi &lt;image_id_or_name&gt;\n</code></pre></p> </li> <li> <p>Pull an Image from Docker Hub:   <pre><code>docker pull &lt;image_name&gt;\n</code></pre></p> </li> <li> <p>Build an Image from a Dockerfile:   <pre><code>docker build -t &lt;image_name&gt; &lt;path_to_dockerfile&gt;\n</code></pre></p> </li> </ul>"},{"location":"Docmosis/Tornado/docker/#5-network-management-commands","title":"5. Network Management Commands","text":"<ul> <li> <p>List Networks:   <pre><code>docker network ls\n</code></pre></p> </li> <li> <p>Inspect a Network:   <pre><code>docker network inspect &lt;network_name&gt;\n</code></pre></p> </li> <li> <p>Create a Network:   <pre><code>docker network create &lt;network_name&gt;\n</code></pre></p> </li> <li> <p>Connect/Disconnect a Container to/from a Network:   <pre><code>docker network connect &lt;network_name&gt; &lt;container_id_or_name&gt;\ndocker network disconnect &lt;network_name&gt; &lt;container_id_or_name&gt;\n</code></pre></p> </li> </ul>"},{"location":"Docmosis/Tornado/docker/#6-volume-management-commands","title":"6. Volume Management Commands","text":"<ul> <li> <p>List Volumes:   <pre><code>docker volume ls\n</code></pre></p> </li> <li> <p>Create a Volume:   <pre><code>docker volume create &lt;volume_name&gt;\n</code></pre></p> </li> <li> <p>Inspect a Volume:   <pre><code>docker volume inspect &lt;volume_name&gt;\n</code></pre></p> </li> <li> <p>Remove a Volume:   <pre><code>docker volume rm &lt;volume_name&gt;\n</code></pre></p> </li> </ul>"},{"location":"Docmosis/Tornado/docker/#7-monitoring-and-debugging","title":"7. Monitoring and Debugging","text":"<ul> <li> <p>Show Resource Usage of Containers:   <pre><code>docker stats\n</code></pre></p> </li> <li> <p>Inspect a Container\u2019s Configuration:   <pre><code>docker inspect &lt;container_id_or_name&gt;\n</code></pre></p> </li> <li> <p>Check Docker Logs:   <pre><code>sudo journalctl -u docker\n</code></pre></p> </li> </ul>"},{"location":"Docmosis/Tornado/docker/#8-clean-up-resources","title":"8. Clean Up Resources","text":"<ul> <li> <p>Remove Unused Data:   <pre><code>docker system prune\n</code></pre>   Add <code>-a</code> to remove unused images, not just dangling ones:   <pre><code>docker system prune -a\n</code></pre></p> </li> <li> <p>Remove All Stopped Containers:   <pre><code>docker container prune\n</code></pre></p> </li> <li> <p>Remove All Unused Volumes:   <pre><code>docker volume prune\n</code></pre></p> </li> </ul>"},{"location":"Docmosis/Tornado/docker/#9-interactive-tools","title":"9. Interactive Tools","text":"<p>If you want an easier way to manage Docker: - Install <code>docker-compose</code> for managing multi-container setups:   <pre><code>sudo apt install docker-compose\n</code></pre></p> <ul> <li>Install <code>ctop</code> to visualize running containers:   <pre><code>sudo apt install ctop\n</code></pre></li> </ul>"},{"location":"Docmosis/Tornado/tornado/","title":"Tornado","text":""},{"location":"Docmosis/Tornado/tornado/#copy-files-from-windows-pc-to-linux-tornado-host","title":"Copy files from Windows PC to Linux Tornado Host","text":"copy template to tornado server<pre><code>C:\\Users\\Username\\Desktop&gt;scp ./alternatingTemplate.docx usern@10.1.1.15:/home/user/docmosisTemplates/\n</code></pre>"},{"location":"Docmosis/Tornado/tornado/#whitelist-images","title":"Whitelist images","text":"<p>If the server is running in a docker container this web interface is of little use as the values to be saved  are lost on server reload which is required for them to take effect.</p> <p>A work around is to pass the variable through to the container on initial load.</p> <pre><code>$ sudo docker run -p 8080:8080   -v  /home/user/docmosisTemplates:/home/docmosis/templates   -e DOCMOSIS_KEY=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx -e DOCMOSIS_CUSTOMSETTINGS=\"docmosis.external.resources.whitelist=https://quickchart.io/\" -e DOCMOSIS_SITE=\"Free Trial Tornado\"   -e DOCMOSIS_ADMINPW=password   docmosis/tornado\n</code></pre> <p>Similarly modifying the Dockerfile achieves the same outcome:</p> <p><code>ENV DOCMOSIS_CUSTOMSETTINGS=docmosis.external.resources.whitelist=https://quickchart.io/</code></p>"},{"location":"Docmosis/Tornado/tornado/#foreign-characters","title":"Foreign Characters","text":"<p>Adding the following to the dockerfile fixes the problem:</p> <p><code>ENV LANG=C.UTF-8</code></p> <p>** AZURE BLOB and Docker</p> <p>To configure Tornado to talk to Azure Blobs follow the information below.</p>"},{"location":"Docmosis/Tornado/tornado/#create-the-blob-store-in-azure","title":"Create the Blob Store in Azure","text":"<ol> <li>create a Blob Store to hold Docmosis Templates</li> <li>upload templates to a folder in that store called \"templates\"</li> <li>upload images to a folder in that store called \"images\" (optional) if you want to have \"stock images\" uploaded</li> </ol> <p>The blob needs to have read permissions available to the Tornado instance. If Tornado is running within an azure instance this can be done via a Storage Data Blob Reader role, otherwise can be done via explicit azure credentials.</p>"},{"location":"Docmosis/Tornado/tornado/#configure-tornado-to-use-the-blob-store","title":"Configure Tornado to use the Blob Store","text":"<ol> <li>configure Tornado \"Source Templates From\" as either: a. azureblob:;; <li>if Tornado is running on an azure instance with a role permitted to read from the blob store created above. OR b. azureblob:;;; - if Tornado is to be provided with credentials to reach the blob store from anywhere. The accessKey for the storage account will need to be provided. <li>save the changes (if using the Tornado UI console)</li> <li>restart Tornado (the Java process running it).</li>"},{"location":"Docmosis/Tornado/tornado/#libreoffice-version","title":"Libreoffice version","text":"<p><code>soffice --version</code></p>"},{"location":"layout-reference/adminitions/","title":"Adminitions","text":"<p>Example of an admonition/callout with a title:</p> <p>Title of the callout</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Collapsible callout:</p> Collapsible callout <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Admonition without title</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Note <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"layout-reference/buttons/","title":"Buttons","text":""},{"location":"layout-reference/buttons/#usage","title":"Usage","text":"<p>Adding buttons</p> <p>In order to render a link as a button, suffix it with curly braces and add the .md-button class selector to it. The button will receive the selected primary color and accent color if active. Button</p> <p>Subscribe to our newsletter</p> <p>Adding primary buttons</p> <p>If you want to display a filled, primary button (like on the landing page of Material for MkDocs), add both, the .md-button and .md-button--primary CSS class selectors. Button, primary</p> <p>Subscribe to our newsletter</p> <p>Adding icon buttons</p> <p>Of course, icons can be added to all types of buttons by using the icon syntax together with any valid icon shortcode, which can be easily found with a few keystrokes through our icon search. Button with icon</p> <p>Send </p>"},{"location":"layout-reference/code-examples/","title":"Code examples","text":"<p>An example of a codeblock for Python:</p> add_numbers.py<pre><code># Function to add two numbers\ndef add_two_numbers(num1, num2):\n    return num1 + num2\n\n# Example usage\nresult = add_two_numbers(5, 3)\nprint('The sum is:', result)\n</code></pre> <p>Example codeblock for JavaScript with lines highlighted:</p> concatenate_strings.js<pre><code>// Function to concatenate two strings\nfunction concatenateStrings(str1, str2) {\n  return str1 + str2;\n}\n\n// Example usage\nconst result = concatenateStrings(\"Hello, \", \"World!\");\nconsole.log(\"The concatenated string is:\", result);\n</code></pre>"},{"location":"layout-reference/diagram-examples/","title":"Diagram Examples","text":""},{"location":"layout-reference/diagram-examples/#flowcharts","title":"Flowcharts","text":"<pre><code>graph LR\n  A[Start] --&gt; B{Failure?};\n  B --&gt;|Yes| C[Investigate...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Success!];</code></pre>"},{"location":"layout-reference/diagram-examples/#sequence-diagrams","title":"Sequence Diagrams","text":"<pre><code>sequenceDiagram\n  autonumber\n  Server-&gt;&gt;Terminal: Send request\n  loop Health\n      Terminal-&gt;&gt;Terminal: Check for health\n  end\n  Note right of Terminal: System online\n  Terminal--&gt;&gt;Server: Everything is OK\n  Terminal-&gt;&gt;Database: Request customer data\n  Database--&gt;&gt;Terminal: Customer data</code></pre>"},{"location":"layout-reference/grid/","title":"Grids","text":"<ul> <li> HTML for content and structure</li> <li> JavaScript for interactivity</li> <li> CSS for text running out of boxes</li> <li> Internet Explorer ... huh?</li> </ul> <ul> <li> <p> Set up in 5 minutes</p> <p>Install <code>mkdocs-material</code> with <code>pip</code> and get up and running in minutes</p> <p> Getting started</p> </li> <li> <p> It's just Markdown</p> <p>Focus on your content and generate a responsive and searchable static site</p> <p> Reference</p> </li> <li> <p> Made to measure</p> <p>Change the colors, fonts, language, icons, logo and more with a few lines</p> <p> Customization</p> </li> <li> <p> Open Source, MIT</p> <p>Material for MkDocs is licensed under MIT and available on [GitHub]</p> <p> License</p> </li> </ul> <p> HTML for content and structure</p> <p> JavaScript for interactivity</p> <p> CSS for text running out of boxes</p> <p> Internet Explorer ... huh?</p>"},{"location":"layout-reference/setup/","title":"Material MkDocs","text":""},{"location":"layout-reference/setup/#initial-setup-steps","title":"Initial setup steps","text":"<ul> <li>Create folder for site</li> <li>in terminal create and activate venv</li> <li>pip install mkdocs-material</li> <li>open folder in editor and in editr terminal activate venv</li> <li>create new mkdocs <code>mkdocs new .</code></li> <li>if only site on port 8000 <code>mkdocs serve</code></li> <li>if 8000 not available `mkdocs serve -a localhost:9999</li> <li>`</li> </ul>"},{"location":"layout-reference/tab-examples/","title":"Tab examples","text":""},{"location":"layout-reference/tab-examples/#content-tabs","title":"Content Tabs","text":"<p>This is some examples of content tabs.</p>"},{"location":"layout-reference/tab-examples/#generic-content","title":"Generic Content","text":"Plain textUnordered listOrdered list <p>This is some plain text</p> <ul> <li>First item</li> <li>Second item</li> <li>Third item</li> </ul> <ol> <li>First item</li> <li>Second item</li> <li>Third item</li> </ol>"},{"location":"layout-reference/tab-examples/#code-blocks-in-content-tabs","title":"Code Blocks in Content Tabs","text":"PythonJavaScript <pre><code>def main():\n    print(\"Hello world!\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>function main() {\n    console.log(\"Hello world!\");\n}\n\nmain();\n</code></pre>"}]}